
//php artisan migrate:fresh --seed
//php artisan db:seed --class=UserSeeder

# Projeto Fullstack Laravel + React (Vite) com Docker

## Estrutura
```
/desafio-3-semana
├── backend/
│   └── app/         # Projeto Laravel
├── frontend/
│   └── app/         # Projeto React com Vite
├── docker/
│   ├── php/         # Dockerfile Laravel
│   └── node/        # Dockerfile React
└── docker-compose.yml
```

---

## Passo a passo para iniciar o projeto

### 1. Criar as pastas principais
```bash
mkdir -p backend/app frontend/app
```

### 2. Iniciar projetos

#### Backend Laravel
```bash
cd backend/app
laravel new .
```

#### Frontend React com Vite
```bash
cd frontend/app
npm create vite@latest
# Escolher React (sem TypeScript)
npm install
```

---

## Backend (Laravel)

### Criar migrations
```bash
php artisan session:table
php artisan make:migration create_user_tables
```
> Ajustar o arquivo de migration criado conforme os dados do usuário

### Ajustar o Model `User`

### Criar Seeders
```bash
php artisan make:seeder UserSeeder
```
> Adicionar usuários de teste

### Rodar os seeders
```bash
php artisan migrate:fresh --seed
```
> Ou:
```bash
php artisan db:seed --class=UserSeeder
```

### Instalar Sanctum para autenticação de API
```bash
composer require laravel/sanctum
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
php artisan migrate
```

### Criar `UserResource` para API JSON
```bash
php artisan make:resource UserResource
```

### Endpoints
- `GET /api/users`
- `GET /api/users/{id}`
- `POST /api/users`
- `PUT /api/users/{id}`
- `DELETE /api/users/{id}`

---

## Frontend (React + Vite)

### Criar componentes de login, listagem de usuários, formulário etc.

### Instalar dependências necessárias
```bash
npm install react-router-dom
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

> Configurar `tailwind.config.js` e `index.css`

---

## Docker
### docker-compose.yml
Contém os serviços para backend e frontend com builds específicos

### Dockerfile (PHP - Laravel)
Em `docker/php/Dockerfile`

### Dockerfile (Node - React)
Em `docker/node/Dockerfile`

---

## Subir os containers
```bash
docker compose up --build -d
```

### Acessos padrão
- Backend: http://localhost:8000
- Frontend: http://localhost:5173 (ou outra porta disponível)

---

## Observações finais
- Para reconstruir completamente:
```bash
docker compose down -v
docker compose build --no-cache
docker compose up -d
```
- Para entrar no container e rodar comandos:
```bash
docker compose exec backend bash
docker compose exec frontend bash
```